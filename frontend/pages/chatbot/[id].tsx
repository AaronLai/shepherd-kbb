import Head from 'next/head'
import React from 'react'
import { Container, Flex, Text, Textarea, useToast } from '@chakra-ui/react'
import { Popover, PopoverTrigger, Button, PopoverContent, PopoverArrow, PopoverCloseButton, PopoverHeader, PopoverBody } from '@chakra-ui/react'
import { UnorderedList, ListItem } from '@chakra-ui/react'
import { useAppContext } from '@/context/auth'
import "@chatscope/chat-ui-kit-styles/dist/default/styles.min.css";
import {
    MainContainer,
    ChatContainer,
    MessageList,
    Message,
    MessageInput,
    TypingIndicator,
} from "@chatscope/chat-ui-kit-react";
import axios from 'axios'
import { useRouter } from 'next/router';

type MessageType = {
    message: string,
    sentTime: string,
    sender: string,
    direction: any,
    position: any,
    source?: string[]
}

export default function CreateProject() {
    const { jwt, setJwtToken } = useAppContext()
    const toast = useToast()
    const router = useRouter()
    const { id } = router.query;
    const projectId = id || '';
    const [rolePrompt, setRolePrompt] = React.useState("")
    const [userQuestion, setUserQuestion] = React.useState("")
    const [loading, setLoading] = React.useState(false)
    const [messages, setMessages] = React.useState<MessageType[]>([{
        message: "Hello! Please ask me some questions!",
        sentTime: "just now",
        sender: "Chatbot",
        direction: "incoming",
        position: "last"
    }])
    const [project, setProject] = React.useState<any>(null)
    const [allowAccess, setAllowAccess] = React.useState(false)
    const askQuestion = async () => {
        console.log(userQuestion);
        setMessages([...messages, {
            message: userQuestion,
            sentTime: "just now",
            sender: "Me",
            direction: "outgoing",
            position: "last"
        }])
        setUserQuestion("")
        setLoading(true)
        try {
            const response = await axios.post('/api/chatting', {
                projectId: projectId,
                text: userQuestion,
                history: chatHistory
            });
            const { answer, source } = response.data;
            setMessages([...messages, {
                message: userQuestion,
                sentTime: "just now",
                sender: "Me",
                direction: "outgoing",
                position: "last"
            }, {
                message: answer,
                sentTime: "just now",
                sender: "Chatbot",
                direction: "incoming",
                position: "last",
                source: source
            }])
            setLoading(false)
        } catch (error: any) {
            console.error(error.response.data);
            toast({
                title: 'Cannot receive a response',
                description: error.message,
                status: 'error',
                duration: 5000,
                isClosable: true,
            })
        }
    }
    React.useEffect(() => {
        console.log(messages);
    }, [messages])
    React.useEffect(() => {
        if(typeof window !== "undefined"){
            const query_id = window.location.pathname.split('/')[window.location.pathname.split('/').length-1]
            const getUserProjects = async () => {
                try {
                    const response = await axios.get('/api/project', {
                        headers: {
                            'token': localStorage.getItem("jwt")
                        }
                    })
                    setAllowAccess(true);
                } catch (error : any ) {
                    console.log(error)
                    router.push('/auth')
                }
            }
            const getProjectDetails = async () => {
                try {
                    console.log(projectId)
                    const res = await axios.get(`/api/project/${query_id}`)
                    if(res.data.project.status !== "public"){
                        getUserProjects();
                    }
                    setProject(res.data.project)
                    console.log(res.data.project)
                }
                catch (err) {
                    console.log(err)
                    router.push('/auth')
                }
            }
            console.log("hi")
            getProjectDetails()
        }
    }, [])

    const chatHistory: Array<MessageHistory> = React.useMemo(() => {
        return messages.map((message, index) => {
            return {
                sender: message.sender,
                text: message.message,
            }
        })
    }, [messages])

    return (
        <>
        <Head>
            <title>{project!=null?project.name:"project_name"}</title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="icon" href="/favicon.ico" />
        </Head>
        {
            (project && project.status == "public" || allowAccess)? (
                <main>
                    <Container marginY="20">
                        <Text fontSize="2xl" textAlign='center' fontWeight='bold' marginBottom="8">{project!=null?project.name:"project_name"}</Text>
                    
                        <Text fontSize="xl">Chatbox</Text>
                        <div style={{ position: "relative", height: "600px" }}>
                            <MainContainer>
                                <ChatContainer>
                                <MessageList style={{padding: "12px 0"}}>
                                    {
                                        messages.map((message, index) => {
                                            return(
                                                <Message 
                                                    key={index}
                                                    model={message}
                                                >
                                                    {
                                                        message.source && <Message.Footer>
                                                        <Popover>
                                                            <PopoverTrigger>
                                                                <span>Source</span>
                                                            </PopoverTrigger>
                                                            <PopoverContent>
                                                                <PopoverArrow />
                                                                <PopoverCloseButton />
                                                                <PopoverHeader>Source</PopoverHeader>
                                                                <PopoverBody>
                                                                    <UnorderedList>
                                                                        {
                                                                            message.source.map((source, index) => {
                                                                                return <ListItem key={index}>{source}</ListItem>
                                                                            })
                                                                        }
                                                                    </UnorderedList>
                                                                </PopoverBody>
                                                            </PopoverContent>
                                                        </Popover>
                                                    </Message.Footer>
                                                    }
                                                    
                                                </Message>
                                            )
                                        })
                                    }
                                    <Flex display={loading? "block" : "none"}>
                                        <TypingIndicator />
                                    </Flex>
                                </MessageList>
                                <MessageInput placeholder="Type message here" value={userQuestion} onChange={(e: any)=>setUserQuestion(e)} attachButton={false} onSend={()=>askQuestion()} sendButton={true} autoFocus />
                                </ChatContainer>
                            </MainContainer>
                        </div>
                    </Container>
                </main>
            ):<></>
        }
    </>
    )
}

